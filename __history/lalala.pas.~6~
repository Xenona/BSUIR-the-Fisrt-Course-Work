unit lalala;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.Menus;

type
  PPicElem=^TPicElems;

  Tdata = packed record
    title: string[20];
    yearOfStart: integer;
    yearOfEnd: integer;
    yearsOfWork: integer;
    genre: string[10];
    theme: string[10];
    place: string[15];
    materials: string[15];
    shortDescr: string[100];
    userRate: integer;
    userComment: string[50];
    isToBeChanged: boolean;
    isFavourite: boolean;
    filename: string[15];
  end;


  TPicElems = record
    data: Tdata;
    Next: PPicElem;
  end;

  TSortMethod = function(elem1, elem2: TData; direction: integer): integer;




  TForm1 = class(TForm)
    Panel1: TPanel;
    Button1: TButton;
    ScrollBox1: TScrollBox;
    FlowPanel1: TFlowPanel;
    MainMenu: TMainMenu;
    FileMenu: TMenuItem;
    OpenFile: TMenuItem;
    SaveFile: TMenuItem;
    HelpMenu: TMenuItem;
    DeveloperMenu: TMenuItem;
    OpenDialog1: TOpenDialog;
    Button2: TButton;
    procedure Button1Click(Sender: TObject);
    procedure OpenFileClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  head: PPicElem;


  Form1: TForm1;

implementation

{$R *.dfm}



procedure FetchAllPics(var head: PPicElem);
var
  readPicList: PPicElem;
  storageFile: file of Tdata;
  current: TData;


begin

  Reset(storageFile, 'dataset.pics');

  new(readPicList);
      head := readPicList;


  repeat

      new(readPicList^.Next);
      readPicList := readPicList^.Next;

      Read(storageFile, Current);

      readPicList^.data.title := current.title;
      readPicList^.data.yearOfStart := current.yearOfStart;
      readPicList^.data.yearOfEnd := current.yearOfEnd;
      readPicList^.data.yearsOfWork := current.yearsOfWork;
      readPicList^.data.genre := current.genre;
      readPicList^.data.theme := current.theme;
      readPicList^.data.place := current.place;
      readPicList^.data.materials := current.materials;
      readPicList^.data.shortDescr := current.shortDescr;
      readPicList^.data.userRate := current.userRate;
      readPicList^.data.userComment := current.userComment;
      readPicList^.data.isToBeChanged := current.isToBeChanged;
      readPicList^.data.isFavourite := current.isFavourite;
      readPicList^.data.userComment := current.userComment;
      readPicList^.data.filename := current.filename;

  until Eof(storageFile);

    readPicList := nil;

  closeFile(storageFile);

    readPicList := head;
    head := readPicList^.Next;
    dispose(readPicList);


  writeln;


end;


procedure CreatePanelWithImageAndLabel(AOwner: TComponent; const ACaption, AImagePath, ALabelText: string; AParentFlowPanel: TFlowPanel);
var
  Panel: TPanel;
  Image: TImage;
  ImgLabel: TLabel;
  ImageWidth, ImageHeight: Integer;
begin
  // Create the panel
  Panel := TPanel.Create(AOwner);
  Panel.Parent := AParentFlowPanel;
  Panel.Align := alTop;
  Panel.Caption := ACaption;
  Panel.BevelOuter := bvNone;
  Panel.Height := 150;
  Panel.Color := clWhite;
  Panel.BorderStyle := bsNone;
  Panel.ParentBackground := False;
  Panel.Alignment := taCenter;

//
  ImgLabel := TLabel.Create(Panel);
  ImgLabel.Parent := Panel;

  ImgLabel.Height := ImgLabel.Canvas.TextHeight(ALabelText);


  // Create the image
  Image := TImage.Create(Panel);
  Image.Parent := Panel;
  Image.Align := alClient;
  Image.Picture.LoadFromFile(AImagePath);
  ImageWidth := Image.Picture.Width;
  ImageHeight := Image.Picture.Height;
  Image.Width := Round(ImageWidth*0.1);
  Image.Height := Round(ImageHeight*0.1);
  Image.Proportional := True;
  Image.Stretch := True;
  Image.Left := 10;
  Image.Top := 10;
  Image.Left := (Panel.Width - Image.Width) div 2;
  Image.Top := (Panel.Height - Image.Height - ImgLabel.Height) div 2;

  // Create the label


  ImgLabel.AutoSize := True;
  ImgLabel.WordWrap := True;
  ImgLabel.Caption := ALabelText;
  ImgLabel.Left := Image.Left;
  ImgLabel.Top := Panel.Height - 20; //Image.Top + ImageHeight + 100;
  ImgLabel.Width := Image.Width;
  ImgLabel.Left := (Panel.Width - ImgLabel.Width) div 2;
  ImgLabel.Top := Image.Top + Image.Height + 10;
end;




procedure TForm1.Button1Click(Sender: TObject);
begin

  CreatePanelWithImageAndLabel(Self, 'My Panel', 'C:\Users\HP\Desktop\uchebka\year1\OAIP\theCoursach\src\spring-1896.bmp', 'My label', FlowPanel1);

  ChangeFileExt(OpenDialog1.FileName, '.dat');



  FlowPanel1.Height := FlowPanel1.Height + 80;

//  FlowPanel1.Sc
//Caption := Application.Title;

end;




procedure TForm1.OpenFileClick(Sender: TObject);
Var
    GalleryFile: TextFile;
begin
    If OpenDialog1.Execute() Then
    begin
      AssignFile(GalleryFile, OpenDialog1.Files[0]);
      Try
        Reset(GalleryFile);
      Finally
        CloseFile(GalleryFile);
      End;
    end;




//    Begin
//      ShowMessage('File: ' + OpenDialog1.FileName);

//      Try
//        Try
//          Reset(FileInput);
//          Edit1.Text := GetSize(FileInput);
//          If Edit1.Text <> '' Then
//          Begin
//            BitBtn1.Click;
//            InputAmountsInMatrix(FileInput);
//          End;
//        Finally
//            CloseFile(FileInput);
//        End;
//      Except
//        MessageBox(Form1.Handle, PChar('Файл закрыт для чтения'), 'Ошибка', MB_ICONSTOP);
//      End;
//    End;
end;
end.
